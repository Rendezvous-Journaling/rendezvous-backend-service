package com.rendezvous.backend.utilities;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.function.Function;

import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
// will create new jwts
// pull up info from existing jwts
@Service
public class JwtUtil {
	
	// used with algorithm to hash/encode our token
	private final String SECRET_KEY = "jump";
	
	// get the username for this token
	public String extractUsername(String token) {
		return extractClaim(token, Claims::getSubject);
	}
	
	public Long extractUserId(String token) {
		return extractClaim(token, claims -> claims.get("userId", Long.class));
	}
	
	public List<SimpleGrantedAuthority> extractUserRoles(String token) throws JsonMappingException, JsonProcessingException{
		Claims claims = extractAllClaims(token);
		
		// Extract the roles claim as JSON string
		String rolesJson = claims.get("roles", String.class);
		
		// ObjectMapper created for deserialization
		ObjectMapper objectMapper = new ObjectMapper();
	
		// Deserialize the JSON string into a List of SimpleGrantedAuthority
		List<SimpleGrantedAuthority> roles = new ArrayList<>();
		
		try {
			JsonNode rolesArray = objectMapper.readTree(rolesJson);
			
			for(JsonNode roleObject : rolesArray) {
				String authority = roleObject.get("authority").asText();
				roles.add(new SimpleGrantedAuthority(authority));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return roles;
	}
	
	
	// get expiration date for this token
	public Date extractExpiration(String token) {
		
		// :: -> method reference
		//    -> pointer, access a method in a class
		//	  -> that way we can pass a method as an argument
		return extractClaim(token, Claims::getExpiration);
	}
	
	
	// takes a token and a claims resolver to find out what the claims are for that particular token
	// so find that data that was passed in through the token and be able to access it again (username, expiration date)
	public <T> T extractClaim(String token, Function<Claims, T> claimsResolver ) {
		
		final Claims claims = extractAllClaims(token);
		return claimsResolver.apply(claims);
	}
	
	// Access modifier is originally private. It is public for testing purposes.
	public Claims extractAllClaims(String token) {
		
		return Jwts.parser().setSigningKey(SECRET_KEY).parseClaimsJws(token).getBody();
	}
	
	
	// checks if the token has expired yet by checking the current date & time and comparing it to the expiration
	private Boolean isTokenExpired(String token) {
		
		return extractExpiration(token).before(new Date());
	}
	
	
	// returns those generated tokens after a successful authentication
//	public String generateTokens(UserDetails userDetails) {
//		
//		// claims info/data you want to include in payload of token besides the user info
//		Map<String, Object> claims = new HashMap<>();
//		
//		 // Include user ID in the claims
//        claims.put("userId", getUserIDFromUserDetails(userDetails));
//		
//		// returns token for user given along with any claims
//		return createToken(claims, userDetails.getUsername());
//	}
//	private Long getUserIDFromUserDetails(UserDetails userDetails) {
//	    if (userDetails instanceof MyUserDetails) {
//	        return ((MyUserDetails) userDetails).getId(); // Replace with the actual method to get user ID
//	    }
//	    return null;
//	}
	
	// creates the token
//	private String createToken(Map<String, Object> claims, String subject) {
//		
//		// sets claims
//		// subject (user that is being authenticated)
//		// set when the token was issued
//		// set expiration when token expires and can be no longer used (here its set for 10 hrs)
//		// sign it with particular algorithm and secret key that lets you know this token is authentic
//		return Jwts.builder().setClaims(claims).setSubject(subject).setIssuedAt( new Date( System.currentTimeMillis() ) )
//				.setExpiration( new Date( System.currentTimeMillis() + 1000 * 60 * 60 * 10 ) )
//				.signWith(SignatureAlgorithm.HS256, SECRET_KEY)
//				.compact();
//	}

	// will validate the token and check if the current token is for the right user requesting it and that the token isn't expired
	public Boolean validateToken(String token) {
		
		final String username = extractUsername(token);
		
		return (!isTokenExpired(token) );
	}
}


// a token is generated by using the username and password in the body of a get authenticate
// command

